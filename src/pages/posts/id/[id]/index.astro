---
import Footer from "@/components/footer/Footer.astro";
import Header from "@/components/header/Header.astro";
import Article from "@/components/posts/article/Article.astro";
import Layout from "@/layouts/Layout.astro";
import type Frontmatter from "@/types/Frontmatter";
import type Metadata from "@/types/Metadata";
import DefaultMetadata from "@/utils/DefaultMetadata";
import { GetImageType } from "@/utils/GetImageType";
import type { InferGetStaticPropsType } from "astro";
import { getCollection, type CollectionEntry } from "astro:content";

export async function getStaticPaths() {
  const posts: CollectionEntry<"post">[] = await getCollection("post");
  return posts.map((post) => ({
    params: {
      id: post.data.number.toString(),
    },
    props: post,
  }));
}

type Props = InferGetStaticPropsType<typeof getStaticPaths>;

const post: Props = Astro.props;
const frontmatter: Frontmatter = post.data;

const [extension, imageTypeError] = GetImageType(
  frontmatter.options?.image?.split(".").pop() as string,
);

const metaData: Metadata = {
  ...DefaultMetadata,
  title: frontmatter.title,
  description:
    `${frontmatter.options?.description} -${DefaultMetadata.title}` || DefaultMetadata.description,
  openGraph: {
    ...DefaultMetadata.openGraph,
    title: frontmatter.title,
    description:
      `${frontmatter.options?.description} -${DefaultMetadata.title}` ||
      DefaultMetadata.openGraph?.description,
    url: `${DefaultMetadata.openGraph?.url}/posts/id/${frontmatter.title}`,
    image: frontmatter.options?.image || DefaultMetadata.openGraph?.image,
    imageAlt: `記事【${frontmatter.title}】のタイトル画像`,
  },
  twitter: {
    ...DefaultMetadata.twitter,
    description:
      `${frontmatter.options?.description}  -${DefaultMetadata.title}` ||
      DefaultMetadata.twitter?.description,
    image: !imageTypeError
      ? (frontmatter.options?.image ?? undefined)
      : DefaultMetadata.twitter?.image,
    imageType: !imageTypeError
      ? extension
        ? extension
        : DefaultMetadata.twitter?.imageType
      : DefaultMetadata.twitter?.imageType,
  },
};

const { Content } = await post.render();
---

<Layout metadata={metaData}>
  <Header navigate="posts" />
  <Article
    Content={Content}
    title={frontmatter.title}
    tags={frontmatter.tags}
    repoUrl={frontmatter.options?.repository ?? undefined}
    youtubeUrl={frontmatter.options?.youtube ?? undefined}
    websiteUrl={frontmatter.options?.website ?? undefined}
    date={frontmatter.date}
  />
  <Footer />
</Layout>
