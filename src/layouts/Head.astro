---
import type Metadata from "@/types/Metadata";

type Props = {
  metadata: Metadata;
};

const { metadata } = Astro.props;
---

<head>
  <meta charset="UTF-8" />
  <meta name="description" content={metadata.description} />
  <meta name="viewport" content="width=device-width" />
  <link rel="icon" type="image/svg+xml" href="/icon.png" />
  <meta name="generator" content={Astro.generator} />
  <title>{metadata.title}</title>
  <meta name="description" content={metadata.description} />
  <meta name="application-name" content={metadata.applicationName} />
  <meta name="category" content={metadata.category} />
  {
    metadata.authors &&
      metadata.authors.map((author: string) => <meta name="author" content={author} />)
  }
  {metadata.keywords && <meta name="keywords" content={metadata.keywords.join(", ")} />}
  {metadata.themeColor && <meta name="theme-color" content={metadata.themeColor} />}
  {metadata.creater && <meta name="creator" content={metadata.creater} />}
  {metadata.manifest && <link rel="manifest" href={metadata.manifest} />}
  {
    metadata.openGraph?.siteName && (
      <meta property="og:site_name" content={metadata.openGraph.siteName} />
    )
  }
  {metadata.openGraph?.title && <meta property="og:title" content={metadata.openGraph.title} />}
  {
    metadata.openGraph?.description && (
      <meta property="og:description" content={metadata.openGraph.description} />
    )
  }
  {metadata.openGraph?.url && <meta property="og:url" content={metadata.openGraph.url} />}
  {metadata.openGraph?.type && <meta property="og:type" content={metadata.openGraph.type} />}
  {metadata.openGraph?.image && <meta property="og:image" content={metadata.openGraph.image} />}
  {
    metadata.openGraph?.imageAlt && (
      <meta property="og:image:alt" content={metadata.openGraph.imageAlt} />
    )
  }
  {
    metadata.openGraph?.imageWidth && (
      <meta property="og:image:width" content={metadata.openGraph.imageWidth.toString()} />
    )
  }
  {
    metadata.openGraph?.imageHeight && (
      <meta property="og:image:height" content={metadata.openGraph.imageHeight.toString()} />
    )
  }
  {metadata.twitter?.card && <meta name="twitter:card" content={metadata.twitter.card} />}
  {metadata.twitter?.site && <meta name="twitter:site" content={metadata.twitter.site} />}
  {metadata.twitter?.creator && <meta name="twitter:creator" content={metadata.twitter.creator} />}
  {
    metadata.twitter?.description && (
      <meta name="twitter:description" content={metadata.twitter.description} />
    )
  }
  {metadata.twitter?.image && <meta name="twitter:image" content={metadata.twitter.image} />}
  {
    metadata.twitter?.imageWidth && (
      <meta name="twitter:image:width" content={metadata.twitter.imageWidth.toString()} />
    )
  }
  {
    metadata.twitter?.imageHeight && (
      <meta name="twitter:image:height" content={metadata.twitter.imageHeight.toString()} />
    )
  }
  <link rel="preconnect" href="https://fonts.googleapis.com" />
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
  <link
    href="https://fonts.googleapis.com/css2?family=Lato:wght@300;400;700&family=Noto+Serif+JP:wght@300&display=swap"
    rel="stylesheet"
    media="print"
    onload="this.media='all'"
  />
  <!-- Google tag (gtag.js) -->
  <script type="text/partytown" async src="https://www.googletagmanager.com/gtag/js?id=G-L9DP779GL6"
  ></script>
  <script type="text/partytown">
    window.dataLayer = window.dataLayer || [];
    function gtag() {
      dataLayer.push(arguments);
    }
    gtag("js", new Date());

    gtag("config", "G-L9DP779GL6");
  </script>
</head>
